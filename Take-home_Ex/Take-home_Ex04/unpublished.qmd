---
title: "Take-home Exercise 4"
description: Putting Visual Analytics into Practical Use
author: "Khoo Wei Lun"
date: "February 16, 2023"
date-modified: "`r Sys.Date()`"
toc: true
toc-location: left
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## 1. Overview

For this exercise, I will be using various time-series data analytical visualization methods to explore the effects of COVID-19, as well as the global economic and political environment in 2022, on Singapore's bilateral trade, including import, export, and trade balance.

The Merchandise Trade data is in .xlxs format and retrieved from the Department of Statistics, Singapore (DOS) website, under the sub-section of Merchandise Trade by Region/Market. The study period is between January 2020 to December 2022.

## 2. Loading R Packages

\--\> Talk about what each package does

```{r}
#| code-fold: true
#| code-summary: "Show the code"
pacman::p_load(readxl, scales, viridis, lubridate, gridExtra, knitr, data.table, ggthemes, tidyverse)
```

## 3. Data Preparation

**3.1 Data Import**

The function `read_excel()` is used to read the downloaded .xlsx file. The arguments included are path to the excel file, `col_types = NULL` to guess the data type for the column and `range` to define the rows and columns where data is extracted. By selecting specific rows and columns, we can reduce some data processing steps compared to importing all rows and columns.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Read the Excel file and select the relevant columns and rows
imports <- read_excel("data/outputFile.xlsx", col_types = NULL, range = "T1!A10:AL129")
exports <- read_excel("data/outputFile.xlsx", col_types = NULL, range = "T2!A10:AL101")

# Review data
imports
exports
```

**3.2 Data Preparation**

3.2.1 Check for missing values

Next, the tables are being checked for missing values using a combination of functions `any()` and `is.na()`. If the result is `FALSE`, it means that there is no missing values.

```{r}
# Check for missing values
print(any(is.na(imports)))
print(any(is.na(exports)))
```

3.2.2 Remove 2023 Jan column

Since there study period covers from January 2020 to December 2022, the 2023 Jan column is removed from both imports and exports tables using indexing with a negative sign as shown below.

```{r}
# Remove 2023 Jan column from imports and exports
imports <- imports[, -c(2)]
exports <- exports[, -c(2)]
```

3.2.3 Reducing number of columns

```{r}
# Rotating the tables to consolidate the months in a column
imports_long <- imports %>%
  pivot_longer(cols = c(2:37),
               values_to = "imports")
exports_long <- exports %>%
  pivot_longer(cols = c(2:37),
               values_to = "exports")

# Correcting the column titles
names(imports_long)[names(imports_long) == "Data Series"] <- "location"
names(imports_long)[names(imports_long) == "name"] <- "monthyear"
names(exports_long)[names(exports_long) == "Data Series"] <- "location"
names(exports_long)[names(exports_long) == "name"] <- "monthyear"
```

creating a com

```{r}
# Creating a combined table
trades <- merge(imports_long, exports_long, by=c("location","monthyear"))
```

**Design Sketch**

**Data Visualisation**

Graph 1: Heatmap: max import and export

Graph 2: slope graph: changes the most in the year
